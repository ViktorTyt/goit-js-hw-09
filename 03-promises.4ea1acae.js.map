{"version":3,"sources":["js/03-promises.js"],"names":["refs","form","document","querySelector","delay","step","amount","createBtn","intervalId","createPromise","position","delayByStep","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","onCreatePromise","event","preventDefault","formData","currentTarget","elements","value","counter","setInterval","Number","then","console","log","catch","clearInterval","addEventListener"],"mappings":";AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,UAAWL,SAASC,cAAc,mBAGpC,IAAIK,EAAa,KAEjB,MAAMC,EAAgB,CAACC,EAAUN,EAAOO,KAChCC,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACLN,EAEFI,EAAQ,CAAEN,SAAAA,EAAUC,YAAAA,IAEpBM,EAAO,CAAEP,SAAAA,EAAUC,YAAAA,KAEpBP,MAIDe,EAAkBC,IACtBA,EAAMC,iBAEAC,MAAAA,EAAWF,EAAMG,cAAcC,SAC/BpB,EAAQkB,EAASlB,MAAMqB,MACvBpB,EAAOiB,EAASjB,KAAKoB,MACrBnB,EAASgB,EAAShB,OAAOmB,MAE3BC,IAAAA,EAAU,EACVf,EAAc,EAElBH,EAAamB,YAAY,KACvBD,GAAW,EACXf,EAAciB,OAAOxB,GAASwB,OAAOvB,GAAQqB,EAAUE,OAAOvB,GAE1DqB,GAAWpB,EACbG,EAAciB,EAAStB,EAAOO,GAC3BkB,KAAK,EAAGnB,SAAAA,EAAUC,YAAAA,MACjBmB,QAAQC,2BAA2BrB,QAAeC,SAEnDqB,MAAM,EAAGtB,SAAAA,EAAUC,YAAAA,MAClBmB,QAAQC,0BAA0BrB,QAAeC,SAGrDsB,cAAczB,IAGfH,IAGLL,EAAKC,KAAKiC,iBAAiB,SAAUf","file":"03-promises.4ea1acae.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  createBtn: document.querySelector('.form > button'),\n};\n\nlet intervalId = null;\n\nconst createPromise = (position, delay, delayByStep) => {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delayByStep });\n      } else {\n        reject({ position, delayByStep });\n      }\n    }, delay);\n  });\n};\n\nconst onCreatePromise = event => {\n  event.preventDefault();\n\n  const formData = event.currentTarget.elements;\n  const delay = formData.delay.value;\n  const step = formData.step.value;\n  const amount = formData.amount.value;\n\n  let counter = 0;\n  let delayByStep = 0;\n\n  intervalId = setInterval(() => {\n    counter += 1;\n    delayByStep = Number(delay) + Number(step) * counter - Number(step);\n\n    if (counter <= amount) {\n      createPromise(counter, delay, delayByStep)\n        .then(({ position, delayByStep }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delayByStep}ms`);\n        })\n        .catch(({ position, delayByStep }) => {\n          console.log(`❌ Rejected promise ${position} in ${delayByStep}ms`);\n        });\n    } else {\n      clearInterval(intervalId);\n      return;\n    }\n  }, step);\n};\n\nrefs.form.addEventListener('submit', onCreatePromise);\n"]}